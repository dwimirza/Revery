/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import controller.controllerHome;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;

import dao.daoItem;
import model.Category;
import model.Item;

/**
 *
 * @author almer
 */
public class GUIAdminpage extends javax.swing.JFrame {

    private ArrayList<String> rentalUnits;

    /**
     * Creates new form GUIAdminpage
     */
    public GUIAdminpage() {
        initComponents();
        setVisible(true);
        this.setTitle("Revery");
        getContentPane().setBackground(Color.WHITE);
        setLocationRelativeTo(null);

        btnShow.setBackground(Color.yellow);
        btnAdd.setBackground(Color.yellow);
        btnUpdate.setBackground(Color.yellow);
        btnDelete.setBackground(Color.yellow);
        textAreaData.setBackground(Color.LIGHT_GRAY);
        textAreaData.setEditable(false);

        btnShow.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                readShowDialog();
            }
        });

        btnAdd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addShowDialog();
            }
        });

        btnUpdate.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateShowDialog();
            }
        });

        btnDelete.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                deleteShowDialog();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textAdmin = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaData = new javax.swing.JTextArea();
        btnShow = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textAdmin.setFont(new java.awt.Font("Cambria Math", 1, 20)); // NOI18N
        textAdmin.setText("Admin Menu");

        textAreaData.setColumns(20);
        textAreaData.setRows(5);
        jScrollPane1.setViewportView(textAreaData);

        btnShow.setText("Show");
        btnShow.setPreferredSize(new java.awt.Dimension(110, 35));

        btnDelete.setText("Delete");
        btnDelete.setPreferredSize(new java.awt.Dimension(110, 35));

        btnAdd.setText("Add");
        btnAdd.setPreferredSize(new java.awt.Dimension(110, 35));

        btnUpdate.setText("Update");
        btnUpdate.setPreferredSize(new java.awt.Dimension(110, 35));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textAdmin)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnShow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(textAdmin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnShow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIAdminpage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIAdminpage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIAdminpage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIAdminpage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIAdminpage();
            }
        });
    }

    private void readShowDialog() {
        JPanel panel = new JPanel(new BorderLayout());

        // ðŸ”¹ Tambahkan pilihan "Category" dan "Item"
        rentalUnits = new ArrayList<>();
        rentalUnits.add("Category");
        rentalUnits.add("Item");

        // ðŸ”¹ Buat ListModel untuk JList
        DefaultListModel<String> listModel = new DefaultListModel<>();
        for (String item : rentalUnits) {
            listModel.addElement(item);
        }

        // ðŸ”¹ Buat JList dengan pilihan
        JList<String> rentalList = new JList<>(listModel);
        rentalList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        JScrollPane scrollPane = new JScrollPane(rentalList);
        scrollPane.setPreferredSize(new Dimension(200, 100));
        panel.add(scrollPane, BorderLayout.CENTER);

        // ðŸ”¹ Tampilkan Dialog
        int result = JOptionPane.showConfirmDialog(null, panel, "Pilih Data",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        // âœ… Jika pengguna menekan OK
        if (result == JOptionPane.OK_OPTION) {
            String selectedChoice = rentalList.getSelectedValue();

            if (selectedChoice != null) {
                // ðŸ”¹ Ambil daftar kategori atau item dari database
                String itemList = getDataItemAndCategory(selectedChoice);

                // ðŸ”¹ Tampilkan di textAreaData
                textAreaData.setText(itemList);
            } else {
                JOptionPane.showMessageDialog(null, "Silakan pilih opsi terlebih dahulu.");
            }
        }
    }

    private void addShowDialog() {
        JPanel panel = new JPanel(new BorderLayout());

        // Menyiapkan opsi yang bisa dipilih oleh user
        rentalUnits = new ArrayList<>();
        rentalUnits.add("Category");
        rentalUnits.add("Item");

        // Menyiapkan ListModel untuk JList
        DefaultListModel<String> listModel = new DefaultListModel<>();
        for (String item : rentalUnits) {
            listModel.addElement(item);
        }

        // Membuat JList dengan listModel
        JList<String> rentalList = new JList<>(listModel);
        rentalList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        // Membungkus JList dengan JScrollPane
        JScrollPane scrollPane = new JScrollPane(rentalList);
        scrollPane.setPreferredSize(new Dimension(150, 80));

        // Menambahkan JScrollPane ke panel
        panel.add(scrollPane, BorderLayout.CENTER);

        // Menampilkan Dialog Pilihan
        int result = JOptionPane.showConfirmDialog(null, panel, "Add Data",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        // Jika User Menekan OK
        if (result == JOptionPane.OK_OPTION) {
            String selectedOption = rentalList.getSelectedValue();

            if ("Category".equals(selectedOption)) {
                tambahKategori(); // Panggil fungsi untuk tambah kategori
            } else if ("Item".equals(selectedOption)) {
                tambahItem(); // Panggil fungsi untuk tambah item
            } else {
                JOptionPane.showMessageDialog(null, "Silakan pilih kategori atau item.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Add Data Failed");
        }
    }

    private void tambahKategori() {
        JTextField categoryIdField = new JTextField();
        JTextField categoryNameField = new JTextField();

        JPanel categoryPanel = new JPanel(new GridLayout(2, 2));
        categoryPanel.add(new JLabel("Category ID:"));
        categoryPanel.add(categoryIdField);
        categoryPanel.add(new JLabel("Category Name:"));
        categoryPanel.add(categoryNameField);

        int result = JOptionPane.showConfirmDialog(null, categoryPanel,
                "Input Category Data", JOptionPane.OK_CANCEL_OPTION);

        if (result == JOptionPane.OK_OPTION) {
            String categoryId = categoryIdField.getText();
            String categoryName = categoryNameField.getText();

            // Simpan kategori ke database atau struktur data
//            addCategory(categoryId, categoryName);
            JOptionPane.showMessageDialog(null, "Kategori berhasil ditambahkan!");
        }
    }

    private void tambahItem() {
        JTextField itemIdField = new JTextField();
        JTextField nameItemField = new JTextField();
        JTextField categoryIdField = new JTextField();
        JTextField rentalPriceField = new JTextField();
        JTextField stockField = new JTextField();

        JPanel itemPanel = new JPanel(new GridLayout(5, 2));
        itemPanel.add(new JLabel("Item ID:"));
        itemPanel.add(itemIdField);
        itemPanel.add(new JLabel("Item Name:"));
        itemPanel.add(nameItemField);
        itemPanel.add(new JLabel("Category ID:"));
        itemPanel.add(categoryIdField);
        itemPanel.add(new JLabel("Rental Price:"));
        itemPanel.add(rentalPriceField);
        itemPanel.add(new JLabel("Stock:"));
        itemPanel.add(stockField);

        int result = JOptionPane.showConfirmDialog(null, itemPanel,
                "Input Item Data", JOptionPane.OK_CANCEL_OPTION);

        if (result == JOptionPane.OK_OPTION) {
            String itemId = itemIdField.getText();
            String itemName = nameItemField.getText();
            String categoryId = categoryIdField.getText();
            double rentalPrice = Double.parseDouble(rentalPriceField.getText());
            int stock = Integer.parseInt(stockField.getText());

            // Simpan item ke database atau struktur data
//            addItem(itemId, itemName, categoryId, rentalPrice, stock);
            JOptionPane.showMessageDialog(null, "Item berhasil ditambahkan!");
        }
    }

    private void updateShowDialog() {
        JPanel panel = new JPanel(new BorderLayout());

        // Menyiapkan opsi yang bisa dipilih oleh user
        rentalUnits = new ArrayList<>();
        rentalUnits.add("Category");
        rentalUnits.add("Item");

        // Menyiapkan ListModel untuk JList
        DefaultListModel<String> listModel = new DefaultListModel<>();
        for (String item : rentalUnits) {
            listModel.addElement(item);
        }

        // Membuat JList dengan listModel
        JList<String> rentalList = new JList<>(listModel);
        rentalList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        // Membungkus JList dengan JScrollPane
        JScrollPane scrollPane = new JScrollPane(rentalList);
        scrollPane.setPreferredSize(new Dimension(150, 80));

        // Menambahkan JScrollPane ke panel
        panel.add(scrollPane, BorderLayout.CENTER);

        // Menampilkan Dialog Pilihan
        int result = JOptionPane.showConfirmDialog(null, panel, "Update Data",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        // Jika User Menekan OK
        if (result == JOptionPane.OK_OPTION) {
            String selectedOption = rentalList.getSelectedValue();

            if ("Category".equals(selectedOption)) {
                editKategori(); // Panggil fungsi untuk tambah kategori
            } else if ("Item".equals(selectedOption)) {
                editItem(); // Panggil fungsi untuk tambah item
            } else {
                JOptionPane.showMessageDialog(null, "Silakan pilih kategori atau item.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Update Data Failed");
        }
    }

    private void editKategori() {
        JTextField categoryIdField = new JTextField();
        JTextField categoryNameField = new JTextField();

        JPanel categoryPanel = new JPanel(new GridLayout(2, 2));
        categoryPanel.add(new JLabel("Category ID:"));
        categoryPanel.add(categoryIdField);
        categoryPanel.add(new JLabel("Category Name:"));
        categoryPanel.add(categoryNameField);

        int result = JOptionPane.showConfirmDialog(null, categoryPanel,
                "Input Category Data", JOptionPane.OK_CANCEL_OPTION);

        if (result == JOptionPane.OK_OPTION) {
            String categoryId = categoryIdField.getText();
            String categoryName = categoryNameField.getText();

            // Simpan kategori ke database atau struktur data
//            addCategory(categoryId, categoryName);
            JOptionPane.showMessageDialog(null, "Kategori berhasil ditambahkan!");
        }
    }

    private void editItem() {
        JTextField itemIdField = new JTextField();
        JTextField nameItemField = new JTextField();
        JTextField categoryIdField = new JTextField();
        JTextField rentalPriceField = new JTextField();
        JTextField stockField = new JTextField();

        JPanel itemPanel = new JPanel(new GridLayout(5, 2));
        itemPanel.add(new JLabel("Item ID:"));
        itemPanel.add(itemIdField);
        itemPanel.add(new JLabel("Item Name:"));
        itemPanel.add(nameItemField);
        itemPanel.add(new JLabel("Category ID:"));
        itemPanel.add(categoryIdField);
        itemPanel.add(new JLabel("Rental Price:"));
        itemPanel.add(rentalPriceField);
        itemPanel.add(new JLabel("Stock:"));
        itemPanel.add(stockField);

        int result = JOptionPane.showConfirmDialog(null, itemPanel,
                "Input Item Data", JOptionPane.OK_CANCEL_OPTION);

        if (result == JOptionPane.OK_OPTION) {
            String itemId = itemIdField.getText();
            String itemName = nameItemField.getText();
            String categoryId = categoryIdField.getText();
            double rentalPrice = Double.parseDouble(rentalPriceField.getText());
            int stock = Integer.parseInt(stockField.getText());

            // Simpan item ke database atau struktur data
//            addItem(itemId, itemName, categoryId, rentalPrice, stock);
            JOptionPane.showMessageDialog(null, "Item berhasil ditambahkan!");
        }
    }

    private void deleteShowDialog() {
        JPanel panel = new JPanel(new BorderLayout());

        // Menyiapkan opsi yang bisa dipilih oleh user
        rentalUnits = new ArrayList<>();
        rentalUnits.add("Category");
        rentalUnits.add("Item");

        // Menyiapkan ListModel untuk JList
        DefaultListModel<String> listModel = new DefaultListModel<>();
        for (String item : rentalUnits) {
            listModel.addElement(item);
        }

        // Membuat JList dengan listModel
        JList<String> rentalList = new JList<>(listModel);
        rentalList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        // Membungkus JList dengan JScrollPane
        JScrollPane scrollPane = new JScrollPane(rentalList);
        scrollPane.setPreferredSize(new Dimension(150, 80));

        // Menambahkan JScrollPane ke panel
        panel.add(scrollPane, BorderLayout.CENTER);

        // Menampilkan Dialog Pilihan
        int result = JOptionPane.showConfirmDialog(null, panel, "Delete Data",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        // Jika User Menekan OK
        if (result == JOptionPane.OK_OPTION) {
            String selectedOption = rentalList.getSelectedValue();

            if ("Category".equals(selectedOption)) {
                hapusKategori(); // Panggil fungsi untuk tambah kategori
            } else if ("Item".equals(selectedOption)) {
                hapusItem(); // Panggil fungsi untuk tambah item
            } else {
                JOptionPane.showMessageDialog(null, "Silakan pilih kategori atau item.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Delete Data Failed");
        }
    }

    private void hapusKategori() {
        daoItem dao1 = new daoItem();
        JTextField categoryIdField = new JTextField();

        JPanel categoryPanel = new JPanel(new GridLayout(2, 2));
        categoryPanel.add(new JLabel("Category ID:"));
        categoryPanel.add(categoryIdField);

        int result = JOptionPane.showConfirmDialog(null, categoryPanel,
                "Input Category Data", JOptionPane.OK_CANCEL_OPTION);

        if (result == JOptionPane.OK_OPTION) {
            String categoryIdText = categoryIdField.getText(); // Ambil teks dari field input

            try {
                int categoryId = Integer.parseInt(categoryIdText); // Konversi ke integer
                dao1.deleteC(categoryId); // Pastikan method delete menerima int
                JOptionPane.showMessageDialog(null, "Kategori berhasil dihapus!");
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Kategori ID harus berupa angka!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }

    private void hapusItem() {
        JTextField itemIdField = new JTextField();

        JPanel itemPanel = new JPanel(new GridLayout(2, 2));
        itemPanel.add(new JLabel("Item ID:"));
        itemPanel.add(itemIdField);

        int result = JOptionPane.showConfirmDialog(null, itemPanel,
                "Input Item Data", JOptionPane.OK_CANCEL_OPTION);

        if (result == JOptionPane.OK_OPTION) {
            String itemId = itemIdField.getText();

            // Simpan item ke database atau struktur data
//            addItem(itemId, itemName, categoryId, rentalPrice, stock);
            JOptionPane.showMessageDialog(null, "Item berhasil dihapus!");
        }
    }

    private String getDataItemAndCategory(String choice) {
        daoItem dao = new daoItem();

        // ðŸ”¹ Jika user memilih "Category", ambil kategori dari database
        if (choice.equalsIgnoreCase("Category")) {
            List<Category> categories = dao.getCategory();
            List<String> categoryNames = new ArrayList<>();

            for (Category category : categories) {
                categoryNames.add(category.getId() + " - " + category.getCatName());
            }

            return categoryNames.isEmpty() ? "Tidak ada kategori tersedia." : "Kategori:\n" + String.join("\n", categoryNames);

        }

        // ðŸ”¹ Jika user memilih "Item", ambil item dari database
        if (choice.equalsIgnoreCase("Item")) {
            List<Item> items = dao.getItem();
            List<String> itemNames = new ArrayList<>();

            for (Item item : items) {
                itemNames.add(item.getItem()); // Ambil nama item
            }

            return itemNames.isEmpty() ? "Tidak ada item tersedia." : "Item:\n" + String.join("\n", itemNames);
        }

        return "Pilihan tidak valid.";
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnShow;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel textAdmin;
    private javax.swing.JTextArea textAreaData;
    // End of variables declaration//GEN-END:variables
}
